name: Build and deploy

on:
  push:
    branches:
      - master


jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PERSONAL_NPM_TOKEN: ${{ secrets.PERSONAL_NPM_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install modules
        run: yarn

      - name: Build libs
        run: yarn build:lib

      - name: Eslint
        run: yarn lint

      - name: Build packages
        run: yarn build

      - name: Build typedoc
        run: yarn typedoc

      - name: Publish common package
        uses: ./.github/actions/publish-package
        with:
          package-name: common

      - name: Publish blog-backend package
        uses: ./.github/actions/publish-package
        with:
          package-name: blog-backend

      - name: Publish ui package
        uses: ./.github/actions/publish-package
        with:
          package-name: ui

      - name: Publish auth-backend package
        uses: ./.github/actions/publish-package
        with:
          package-name: auth-backend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Node build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.docker/node/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fuks-blog:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Nginx build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.docker/nginx/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fuks-blog-nginx:latest

  deploy:
    name: Deploy

    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy single file to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: .github/workflows/.deploy.sh
          remote: /fuks-blog/.deploy.sh
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          privateKey: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pull and run docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /fuks-blog
            export FUKS_BLOG_AUTH_POSTGRES_PASSWORD=${{ secrets.FUKS_BLOG_AUTH_POSTGRES_PASSWORD }}
            export FUKS_BLOG_AUTH_POSTGRES_USER=${{ secrets.FUKS_BLOG_AUTH_POSTGRES_USER }}
            export PERSONAL_NPM_TOKEN=${{ secrets.PERSONAL_NPM_TOKEN }}
            bash /fuks-blog/.deploy.sh

  notification:
    name: Notification

    needs: [build,deploy]

    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Send telegram message
        uses: appleboy/telegram-action@master
        env:
          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{github.sha}}
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            *${{ github.actor }}* created [commit](${{ env.COMMIT_URL }})

            [Build and deploy](${{ env.COMMIT_URL }}/checks)

            Build *${{ needs.build.result == 'success' && '✅' || '⛔️' }}*
            Deploy *${{ needs.deploy.result == 'success' && '✅' || '⛔️' }}*
