name: Build and deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PERSONAL_NPM_TOKEN: ${{ secrets.PERSONAL_NPM_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install modules
        run: yarn install

      - name: Build libs
        run: yarn build:lib

      - name: Eslint
        run: yarn lint

      - name: E2E tests
        run: yarn e2e

      - name: Build packages
        run: yarn build

      - name: Build typedoc
        run: yarn typedoc

      - name: Publish common package
        uses: ./.github/actions/publish-package
        with:
          package-name: packages/common

      - name: Publish blog-backend package
        uses: ./.github/actions/publish-package
        with:
          package-name: entries/blog-backend

      - name: Publish ui package
        uses: ./.github/actions/publish-package
        with:
          package-name: packages/ui

      - name: Publish auth-backend package
        uses: ./.github/actions/publish-package
        with:
          package-name: entries/auth-backend

      - name: Publish api-auth-backend package
        uses: ./.github/actions/publish-package
        with:
          package-name: packages/api-auth-backend

      - name: Publish api-blog-backend package
        uses: ./.github/actions/publish-package
        with:
          package-name: packages/api-blog-backend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Node build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.docker/node/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fuks-blog:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Nginx build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./.docker/nginx/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fuks-blog-nginx:latest

  deploy:
    name: Deploy

    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Pull docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |            
            docker pull difuks/fuks-blog
            docker pull difuks/fuks-blog-nginx

      - name: Stop docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |            
            docker stop fuks-blog || true
            docker stop fuks-blog-nginx || true
            docker stop fuks-blog-auth-postgres || true
            docker stop fuks-blog-backend-postgres || true
            docker rm fuks-blog || true
            docker rm fuks-blog-nginx || true
            docker rm fuks-blog-auth-postgres || true
            docker rm fuks-blog-backend-postgres || true

      - name: Run docker containers
        uses: appleboy/ssh-action@master
        env:
          FUKS_BLOG_AUTH_POSTGRES_PASSWORD: ${{ secrets.FUKS_BLOG_AUTH_POSTGRES_PASSWORD }}
          FUKS_BLOG_AUTH_POSTGRES_USER: ${{ secrets.FUKS_BLOG_AUTH_POSTGRES_USER }}
          FUKS_BLOG_BACKEND_POSTGRES_USER: ${{ secrets.FUKS_BLOG_BACKEND_POSTGRES_USER }}
          FUKS_BLOG_BACKEND_POSTGRES_PASSWORD: ${{ secrets.FUKS_BLOG_BACKEND_POSTGRES_PASSWORD }}
          PERSONAL_NPM_TOKEN: ${{ secrets.PERSONAL_NPM_TOKEN }}
          FUKS_BLOG_AUTH_JWT_SECRET: ${{ secrets.FUKS_BLOG_AUTH_JWT_SECRET }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: >
            FUKS_BLOG_AUTH_POSTGRES_PASSWORD,
            FUKS_BLOG_AUTH_POSTGRES_USER,
            FUKS_BLOG_BACKEND_POSTGRES_USER,
            FUKS_BLOG_BACKEND_POSTGRES_PASSWORD,
            PERSONAL_NPM_TOKEN,
            FUKS_BLOG_AUTH_JWT_SECRET
          script: |            
            docker run --name fuks-blog-auth-postgres \
            --rm -d \
            -e POSTGRES_PASSWORD="${FUKS_BLOG_AUTH_POSTGRES_PASSWORD}" \
            -e POSTGRES_USER="${FUKS_BLOG_AUTH_POSTGRES_USER}" \
            -e POSTGRES_DB=auth \
            -e PGDATA=/var/lib/postgresql/data/pgdata \
            -v "${FUKS_BLOG_AUTH_POSTGRES_VOLUME}":/var/lib/postgresql/data \
            --network="my-blog" \
            postgres:14.2-alpine
            
            docker run --name fuks-blog-backend-postgres \
            --rm -d \
            -e POSTGRES_PASSWORD="${FUKS_BLOG_BACKEND_POSTGRES_PASSWORD}" \
            -e POSTGRES_USER="${FUKS_BLOG_BACKEND_POSTGRES_USER}" \
            -e POSTGRES_DB=blog \
            -e PGDATA=/var/lib/postgresql/data/pgdata \
            -v "${FUKS_BLOG_BACKEND_POSTGRES_VOLUME}":/var/lib/postgresql/data \
            --network="my-blog" \
            postgres:14.2-alpine
            
            docker run --name fuks-blog \
            --rm \
            -e FUKS_BLOG_AUTH_POSTGRES_PASSWORD="${FUKS_BLOG_AUTH_POSTGRES_PASSWORD}" \
            -e FUKS_BLOG_AUTH_POSTGRES_USER="${FUKS_BLOG_AUTH_POSTGRES_USER}" \
            -e FUKS_BLOG_BACKEND_POSTGRES_PASSWORD="${FUKS_BLOG_BACKEND_POSTGRES_PASSWORD}" \
            -e FUKS_BLOG_BACKEND_POSTGRES_USER="${FUKS_BLOG_BACKEND_POSTGRES_USER}" \
            -e FUKS_BLOG_AUTH_JWT_SECRET="${FUKS_BLOG_AUTH_JWT_SECRET}" \
            -e PERSONAL_NPM_TOKEN="${PERSONAL_NPM_TOKEN}" \
            --network="my-blog" \
            difuks/fuks-blog
            sleep 10
            docker run --name fuks-blog-nginx --rm --network="my-blog" -d difuks/fuks-blog-nginx

  notification:
      name: Notification

      needs: [build,deploy]

      runs-on: ubuntu-latest

      if: always()

      steps:
        - name: Send telegram message
          uses: appleboy/telegram-action@master
          env:
            COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{github.sha}}
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            format: markdown
            message: |
              *${{ github.actor }}* created [commit](${{ env.COMMIT_URL }})
  
              [Build and deploy](${{ env.COMMIT_URL }}/checks)
  
              Build *${{ needs.build.result == 'success' && '✅' || '⛔️' }}*
              Deploy *${{ needs.deploy.result == 'success' && '✅' || '⛔️' }}*
